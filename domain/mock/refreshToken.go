// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChooseCruise/choosecruise-backend/domain (interfaces: RefreshTokenUsecase)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ChooseCruise/choosecruise-backend/domain"
	tokenutil "github.com/ChooseCruise/choosecruise-backend/internal/tokenutil"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenUsecase is a mock of RefreshTokenUsecase interface.
type MockRefreshTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenUsecaseMockRecorder
}

// MockRefreshTokenUsecaseMockRecorder is the mock recorder for MockRefreshTokenUsecase.
type MockRefreshTokenUsecaseMockRecorder struct {
	mock *MockRefreshTokenUsecase
}

// NewMockRefreshTokenUsecase creates a new mock instance.
func NewMockRefreshTokenUsecase(ctrl *gomock.Controller) *MockRefreshTokenUsecase {
	mock := &MockRefreshTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenUsecase) EXPECT() *MockRefreshTokenUsecaseMockRecorder {
	return m.recorder
}

// CreateTokens mocks base method.
func (m *MockRefreshTokenUsecase) CreateTokens(arg0 *gin.Context, arg1 *domain.User, arg2, arg3 time.Duration, arg4 tokenutil.Maker, arg5 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokens", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTokens indicates an expected call of CreateTokens.
func (mr *MockRefreshTokenUsecaseMockRecorder) CreateTokens(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokens", reflect.TypeOf((*MockRefreshTokenUsecase)(nil).CreateTokens), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ExtractUsernameFromToken mocks base method.
func (m *MockRefreshTokenUsecase) ExtractUsernameFromToken(arg0 string, arg1 tokenutil.Maker) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUsernameFromToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUsernameFromToken indicates an expected call of ExtractUsernameFromToken.
func (mr *MockRefreshTokenUsecaseMockRecorder) ExtractUsernameFromToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUsernameFromToken", reflect.TypeOf((*MockRefreshTokenUsecase)(nil).ExtractUsernameFromToken), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockRefreshTokenUsecase) GetUserByUsername(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRefreshTokenUsecaseMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRefreshTokenUsecase)(nil).GetUserByUsername), arg0, arg1)
}
