// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChooseCruise/choosecruise-backend/domain (interfaces: SignupUsecase)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ChooseCruise/choosecruise-backend/domain"
	tokenutil "github.com/ChooseCruise/choosecruise-backend/internal/tokenutil"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockSignupUsecase is a mock of SignupUsecase interface.
type MockSignupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSignupUsecaseMockRecorder
}

// MockSignupUsecaseMockRecorder is the mock recorder for MockSignupUsecase.
type MockSignupUsecaseMockRecorder struct {
	mock *MockSignupUsecase
}

// NewMockSignupUsecase creates a new mock instance.
func NewMockSignupUsecase(ctrl *gomock.Controller) *MockSignupUsecase {
	mock := &MockSignupUsecase{ctrl: ctrl}
	mock.recorder = &MockSignupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupUsecase) EXPECT() *MockSignupUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSignupUsecase) Create(arg0 context.Context, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSignupUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSignupUsecase)(nil).Create), arg0, arg1)
}

// CreateTokens mocks base method.
func (m *MockSignupUsecase) CreateTokens(arg0 *domain.User, arg1, arg2 time.Duration, arg3 tokenutil.Maker, arg4 *gin.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokens", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTokens indicates an expected call of CreateTokens.
func (mr *MockSignupUsecaseMockRecorder) CreateTokens(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokens", reflect.TypeOf((*MockSignupUsecase)(nil).CreateTokens), arg0, arg1, arg2, arg3, arg4)
}

// GetUserByEmail mocks base method.
func (m *MockSignupUsecase) GetUserByEmail(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSignupUsecaseMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSignupUsecase)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockSignupUsecase) GetUserByUsername(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockSignupUsecaseMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockSignupUsecase)(nil).GetUserByUsername), arg0, arg1)
}
