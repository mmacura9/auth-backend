// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" ("username", "email", "full_name", "password", "birth_date")
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, full_name, birth_date, password, created_at, updated_at, last_login, deleted_at
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	FullName  string    `json:"full_name"`
	Password  string    `json:"password"`
	BirthDate time.Time `json:"birth_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FullName,
		arg.Password,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.BirthDate,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE "username" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, full_name, birth_date, password, created_at, updated_at, last_login, deleted_at
FROM "user"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.BirthDate,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, full_name, birth_date, password, created_at, updated_at, last_login, deleted_at
FROM "user"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.BirthDate,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.DeletedAt,
	)
	return i, err
}
